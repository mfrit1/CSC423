DROP TABLE IF EXISTS RETAILSTORE;
CREATE TABLE RETAILSTORE(
    storeId varchar(20),
    storeCode varchar(30),
    storeName varchar(50),
    address varchar(50),
    city varchar(30),
    state char(2),
    zip char(5),
    phone varchar(15),
    managerName varchar(30),
    PRIMARY KEY(storeId),
    UNIQUE(storeCode)
);

DROP TABLE IF EXISTS VENDOR;
CREATE TABLE VENDOR(
    vendorId varchar(20),
    vendorCode varchar(30),
    vendorName varchar(50),
    address varchar(50),
    city varchar(30),
    state char(2),
    zip char(5),
    phone varchar(15),
    contactPersonName varchar(40),
    password varchar(40),
    PRIMARY KEY(vendorId),
    UNIQUE(vendorCode)
);

DROP TABLE IF EXISTS INVENTORYITEM;
CREATE TABLE INVENTORYITEM(
    itemId varchar(20),
    description varchar(40),
    size varchar(10),
    division varchar(20),
    department varchar(20),
    category varchar(20),
    itemCost varchar(10),
    itemRetail varchar(10),
    imageFileName varchar(50),
    vendorId varchar(20),
    PRIMARY KEY(itemId),
    FOREIGN KEY (vendorId) REFERENCES VENDOR(vendorId)
);

DROP TABLE IF EXISTS INVENTORY;
CREATE TABLE INVENTORY(
    inventoryId varchar(20),
    storeId varchar(20),
    itemId varchar(20),
    quantityInStock int,
    FOREIGN KEY (storeId) REFERENCES RETAILSTORE(storeId),
    FOREIGN KEY (itemId) REFERENCES INVENTORYITEM(itemId),
    PRIMARY KEY(inventoryId)
);

DROP TABLE IF EXISTS CUSTOMER;
CREATE TABLE CUSTOMER(
    customerId varchar(20),
    name varchar(30),
    address varchar(50),
    city varchar(30),
    state char(2),
    zip char(5),
    phone varchar(15),
    email varchar (20),
    PRIMARY KEY(customerId)
);

DROP TABLE IF EXISTS CUSTOMERPURCHASE;
CREATE TABLE CUSTOMERPURCHASE(
    customerPurchaseId varchar(20),
    customerId varchar(20),
    itemId varchar(20),
    storeId varchar(20),
    quantityPurchased int,
    dateTimeOfPurchase varchar(20),
    FOREIGN KEY (storeId) REFERENCES RETAILSTORE(storeId),
    FOREIGN KEY (itemId) REFERENCES INVENTORYITEM(itemId),
    FOREIGN KEY (customerId) REFERENCES CUSTOMER(customerId),
    PRIMARY KEY(customerPurchaseId)
);

DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS(
    orderId varchar(20),
    vendorId varchar(20),
    storeId varchar(20),
    dateTimeOfOrder varchar(20),
    status ENUM ('Pending', 'Delivered', 'Canceled'),
    dateTimeOfFulfilment varchar(20),
    FOREIGN KEY (storeId) REFERENCES RETAILSTORE(storeId),
    FOREIGN KEY (vendorId) REFERENCES VENDOR(vendorId),
    PRIMARY KEY(orderId)
);

DROP TABLE IF EXISTS ORDERDETAIL;
CREATE TABLE ORDERDETAIL(
    orderDetailId varchar(20),
    orderId varchar(20),
    itemId varchar(20),
    quantityOrdered int,
    FOREIGN KEY (itemId) REFERENCES INVENTORYITEM(itemId),
    FOREIGN KEY (orderId) REFERENCES ORDERS(orderId),
    PRIMARY KEY(orderDetailId)
);

DROP TABLE IF EXISTS RETURNTOVENDOR;
CREATE TABLE RETURNTOVENDOR(
   returnToVendorId varchar(20),
    vendorId varchar(20),
    storeId varchar(20),
    dateTimeOfReturn varchar(20),
    FOREIGN KEY (vendorId) REFERENCES VENDOR(vendorId),
    FOREIGN KEY (storeId) REFERENCES RETAILSTORE(storeId),
    PRIMARY KEY(returnToVendorId)
);

DROP TABLE IF EXISTS RETURNTOVENDORDETAIL;
CREATE TABLE RETURNTOVENDORDETAIL(
    returnToVendorDetailId varchar(20),
    returnToVendorId varchar(20),
    itemId varchar(20),
    quantityReturned int,
    FOREIGN KEY (returnToVendorId) REFERENCES RETURNTOVENDOR(returnToVendorId),
    FOREIGN KEY (itemId) REFERENCES INVENTORYITEM(itemId),
    PRIMARY KEY(returnToVendorDetailId)
);